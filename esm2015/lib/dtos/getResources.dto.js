import { __awaiter, __decorate } from "tslib";
import { Type } from 'class-transformer';
import { IsArray, IsIn, IsNumber, IsOptional, IsString, Matches, ValidateNested, validateOrReject, } from 'class-validator';
export class Query {
    constructor(select, from, where, orderBy) {
        this.select = select;
        this.from = from;
        this.where = where;
        this.orderBy = orderBy;
    }
    getCountSql() {
        let sql = `SELECT COUNT(*) AS value FROM ${this.from} `;
        if (this.where)
            sql += `WHERE ${this.where} `;
        return sql;
    }
    getSql(limit, page) {
        const skip = (page - 1) * limit;
        let sql = `SELECT ${this.select} FROM ${this.from} `;
        if (this.where)
            sql += `WHERE ${this.where} `;
        if (this.orderBy)
            sql += `ORDER BY ${this.orderBy} `;
        sql += `LIMIT ${skip}, ${limit}`;
        return sql;
    }
}
__decorate([
    IsString(),
    IsOptional()
], Query.prototype, "select", void 0);
__decorate([
    IsString(),
    IsOptional()
], Query.prototype, "from", void 0);
__decorate([
    IsString(),
    IsOptional()
], Query.prototype, "where", void 0);
__decorate([
    IsString(),
    IsOptional()
], Query.prototype, "orderBy", void 0);
export class Filter {
    constructor(field, operator, value) {
        this.field = field;
        this.operator = operator;
        this.value = value;
    }
}
__decorate([
    IsString()
], Filter.prototype, "field", void 0);
__decorate([
    IsString(),
    IsIn(['IN', 'LIKE', '=', '>=', '<=', 'NOT LIKE', '!='])
], Filter.prototype, "operator", void 0);
export class GetResourcesDto {
    constructor() {
        this.filters = [];
        this.limit = 10;
        this.page = 1;
    }
    toParamsDict() {
        const dict = {};
        if (this.fields)
            dict['fields'] = JSON.stringify(this.fields);
        if (this.sort)
            dict['sort'] = JSON.stringify(this.sort);
        if (this.filters)
            dict['filters'] = JSON.stringify(this.filters);
        if (this.sort)
            dict['sort'] = JSON.stringify(this.sort);
        if (this.page)
            dict['page'] = JSON.stringify(this.page);
        if (this.query)
            dict['query'] = JSON.stringify(this.query);
        if (this.limit)
            dict['limit'] = JSON.stringify(this.limit);
        return dict;
    }
    fromParamsDict(params) {
        const { fields, sort, filters, limit, page, query } = params;
        if (fields)
            this.fields = JSON.parse(fields);
        if (sort)
            this.sort = JSON.parse(sort);
        if (filters)
            this.filters = JSON.parse(filters);
        if (limit)
            this.limit = JSON.parse(limit);
        if (page)
            this.page = JSON.parse(page);
        if (query) {
            const queryDict = JSON.parse(query);
            this.query = new Query(queryDict.select, queryDict.from, queryDict.where, queryDict.orderBy);
        }
    }
    validate() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield validateOrReject(this);
                return true;
            }
            catch (errors) {
                console.log('Dto Validation Failed. Errors: ', errors);
                return false;
            }
        });
    }
}
__decorate([
    IsArray(),
    IsOptional()
], GetResourcesDto.prototype, "fields", void 0);
__decorate([
    IsString(),
    IsOptional(),
    Matches(/^[+-].*/, {
        message: "sort must start with '+' or '-'",
        each: true,
    })
], GetResourcesDto.prototype, "sort", void 0);
__decorate([
    IsArray(),
    IsOptional(),
    ValidateNested(),
    Type(() => Filter)
], GetResourcesDto.prototype, "filters", void 0);
__decorate([
    IsNumber(),
    IsOptional()
], GetResourcesDto.prototype, "limit", void 0);
__decorate([
    IsNumber(),
    IsOptional()
], GetResourcesDto.prototype, "page", void 0);
__decorate([
    IsOptional(),
    ValidateNested(),
    Type(() => Query)
], GetResourcesDto.prototype, "query", void 0);
//# sourceMappingURL=data:application/json;base64,